// <auto-generated />
using System;
using Cocktails.API.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cocktails.API.Migrations
{
    [DbContext(typeof(CocktailContext))]
    partial class CocktailContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Cocktails.API.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Old fashioned"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Classic"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Strong"
                        });
                });

            modelBuilder.Entity("Cocktails.API.Models.Cocktail", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Alcoholic")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CocktailId");

                    b.ToTable("Cocktails");
                });

            modelBuilder.Entity("Cocktails.API.Models.CocktailCategory", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("CocktailId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CocktailCategories");
                });

            modelBuilder.Entity("Cocktails.API.Models.CocktailIngredient", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredients");
                });

            modelBuilder.Entity("Cocktails.API.Models.Ingredient", b =>
                {
                    b.Property<Guid>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AlcoholPercentage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredient");

                    b.HasData(
                        new
                        {
                            IngredientId = new Guid("0fed5428-0694-4db8-a896-6b48787a9abb"),
                            AlcoholPercentage = 41,
                            Description = "Alcoholic substance drunk by pirates",
                            Name = "Rum"
                        },
                        new
                        {
                            IngredientId = new Guid("0330d1dc-2cb7-407c-8ad8-b52d8ec2cb54"),
                            AlcoholPercentage = 39,
                            Description = "Alcoholic substance drunk by Russians",
                            Name = "Vodka"
                        },
                        new
                        {
                            IngredientId = new Guid("c18fe643-3e99-46b0-8fc3-958554d434e8"),
                            AlcoholPercentage = 38,
                            Description = "Alcoholic substance drunk by Alcoholics",
                            Name = "Gin"
                        });
                });

            modelBuilder.Entity("Cocktails.API.Models.CocktailCategory", b =>
                {
                    b.HasOne("Cocktails.API.Models.Category", "Category")
                        .WithMany("CocktailCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cocktails.API.Models.Cocktail", null)
                        .WithMany("CocktailCategories")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Cocktails.API.Models.CocktailIngredient", b =>
                {
                    b.HasOne("Cocktails.API.Models.Cocktail", null)
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cocktails.API.Models.Ingredient", "Ingredient")
                        .WithMany("CocktailIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Cocktails.API.Models.Category", b =>
                {
                    b.Navigation("CocktailCategories");
                });

            modelBuilder.Entity("Cocktails.API.Models.Cocktail", b =>
                {
                    b.Navigation("CocktailCategories");

                    b.Navigation("CocktailIngredients");
                });

            modelBuilder.Entity("Cocktails.API.Models.Ingredient", b =>
                {
                    b.Navigation("CocktailIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
